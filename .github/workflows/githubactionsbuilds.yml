name: GitHubActionsBuilds

on: push

jobs:
  generate_version_number:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      build_number: ${{ github.ref == 'refs/heads/master' && steps.buildnumber.outputs.build_number || 1 }}
    steps:
    - name: Generate build number
      if: github.ref == 'refs/heads/master'
      id: buildnumber
      uses: onyxmueller/build-tag-number@v1
      with:
        token: ${{secrets.github_token}}

  build_docker:
    needs: generate_version_number
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: devedse
        password: ${{ secrets.DOCKERHUBTOKEN }}
    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v2
      with:
        image: tonistiigi/binfmt:latest
        platforms: all
    - name: Available platforms
      run: echo ${{ steps.qemu.outputs.platforms }}
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
    - name: Builder instance name
      run: echo ${{ steps.buildx.outputs.name }}
    - name: Available platforms
      run: echo ${{ steps.buildx.outputs.platforms }}
    - name: Set Image Tags
      id: tags
      run: |
        VERSION=1.0.${{needs.generate_version_number.outputs.build_number}}
        echo Version: $VERSION
        echo github.ref: ${{ github.ref }}
        echo github.actor: ${{ github.actor }}
        echo branch name: ${GITHUB_REF#refs/heads/}
        BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
        echo parsed branch name: ${BRANCH_NAME}

        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

        if [[ "${{ github.ref }}" == 'refs/heads/master' ]]; then
          echo "TAGS=-t devedse/devecoollibconsoleapp:${VERSION} -t devedse/devecoollib.consoleapp:latest" >> $GITHUB_OUTPUT
        elif [[ "${{ github.actor }}" == 'dependabot[bot]' ]]; then
          echo "TAGS=-t devedse/devecoollibconsoleapp:beta_${BRANCH_NAME}" >> $GITHUB_OUTPUT
        else 
          echo "TAGS=-t devedse/devecoollibconsoleapp:beta_${BRANCH_NAME} -t devedse/devecoollib.consoleapp:beta_nightly" >> $GITHUB_OUTPUT
        fi
    - name: Run Buildx
      run: |
        docker buildx build -f DeveCoolLib.ConsoleApp/Dockerfile --build-arg BUILD_VERSION=${{steps.tags.outputs.version}} --platform linux/arm64,linux/amd64 ${{steps.tags.outputs.tags}} ${{ (github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)) && '--push' || '' }} .

  
  build_linux:
    needs: generate_version_number
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: dotnet restore
      run: dotnet restore DeveCoolLib.sln
    - name: dotnet build
      run: dotnet build DeveCoolLib.sln -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: dotnet test
      run: dotnet test DeveCoolLib.sln -c Release --no-build --verbosity normal

  build_windows:
    needs: generate_version_number
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET Core @ Latest
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x     
    - uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '19' # The JDK version to make available on the path.
        java-package: jdk # (jre, jdk, or jdk+fx) - defaults to jdk
        architecture: x64 # (x64 or x86) - defaults to x64
    - name: Install tools
      run: |
        dotnet tool install --global dotnet-sonarscanner
        dotnet tool install --global dotnet-reportgenerator-globaltool
    - name: dotnet restore
      run: dotnet restore DeveCoolLib.sln
    - name: SonarQube begin
      run: dotnet-sonarscanner begin /k:"DeveCoolLib" /o:"devedse-github" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login=${{secrets.SONARQUBETOKEN}} /d:sonar.cs.opencover.reportsPaths=".\DeveCoolLib.Tests\TestResults\*\coverage.opencover.xml" /d:sonar.coverage.exclusions="DeveCoolLib.ConsoleApp/**/*.cs,DeveCoolLib.Tests/**/*.cs"
    - name: dotnet build
      run: dotnet build DeveCoolLib.sln -c Release --no-restore /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: dotnet test
      #run: dotnet test DeveCoolLib.sln --verbosity normal --no-build -c Release /p:CollectCoverage=true /p:CoverletOutputFormat=\`"cobertura,opencover\`" /p:CoverletOutput=./TestResults/Coverage/
      run: dotnet test DeveCoolLib.sln --verbosity normal --no-build -c Release --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura,opencover
    - name: SonarQube end
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: dotnet-sonarscanner end /d:sonar.login=${{secrets.SONARQUBETOKEN}}
    - name: Pack
      run: dotnet pack DeveCoolLib\DeveCoolLib.csproj --verbosity normal --no-build -c Release /p:Version=1.0.${{needs.generate_version_number.outputs.build_number}}
    - name: Run CodeCov
      uses: codecov/codecov-action@v3
      with:
        directory: ./DeveCoolLib.Tests/TestResults
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)

    - name: Run GoPackage.ps1 script
      run: .\Scripts\GoPackage.ps1
      shell: pwsh
  

    - uses: actions/upload-artifact@v3
      with:
        name: DeveCoolLib7z
        path: ./Scripts/Output/DeveCoolLib.7z
    - uses: actions/upload-artifact@v3
      with:
        name: DeveCoolLibZip
        path: ./Scripts/Output/DeveCoolLib.zip
    - uses: actions/upload-artifact@v3
      with:
        name: DeveCoolLibNuGet
        path: |
          ./DeveCoolLib/bin/Release/*.nupkg
          ./DeveCoolLib/bin/Release/*.snupkg

  release_github:
    needs: [generate_version_number, build_windows, build_linux, build_docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts/

    - name: Display structure of downloaded files
      run: |
        cd ./artifacts/
        ls -R
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: 1.0.${{needs.generate_version_number.outputs.build_number}}
        release_name: 1.0.${{needs.generate_version_number.outputs.build_number}}
        body: |
          ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: 1.0.${{needs.generate_version_number.outputs.build_number}}
        files: |
          ./artifacts/DeveCoolLib7z/DeveCoolLib.7z
          ./artifacts/DeveCoolLibZip/DeveCoolLib.zip
          ./artifacts/DeveCoolLibNuGet/*.nupkg
          ./artifacts/DeveCoolLibNuGet/*.snupkg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  release_nuget:
    needs: [generate_version_number, build_windows, build_linux, build_docker, release_github]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        name: DeveCoolLibNuGet
        path: ./artifacts/DeveCoolLibNuGet/
    - name: Push NuGet
      run: dotnet nuget push ./artifacts/DeveCoolLibNuGet/DeveCoolLib.1.0.${{needs.generate_version_number.outputs.build_number}}.nupkg -k ${{ secrets.NUGETTOKEN }} -s https://api.nuget.org/v3/index.json
